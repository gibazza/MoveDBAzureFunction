// Generated by Xamasoft JSON Class Generator
// http://www.xamasoft.com/json-class-generator

using System;
using System.Collections;
using System.Reflection;
using Microsoft.WindowsAzure.Storage.Table;
using System.Collections.Generic;
//using MovieDBconnection.MovieDiscoveryJsonTypes;

namespace MovieDBconnection.PersonDiscoveryJsonTypes
{
    public  class Person : TableEntity, IEnumerable, IEnumerator
    {

        public Person() { }

        public Person(dynamic x)
        {
            this.popularity = x.popularity.ToString();
            this.profile_path = x.profile_path.ToString();
            this.name = x.name.ToString();
            this.known_for_department = x.known_for_department.ToString();
            this.adult = x.adult.ToString();
            this.gender = x.gender.ToString();
            this.status = "A";
            this.RowKey = x.id.ToString();
            this.PartitionKey = x.name.ToString().Substring(0,1);
            if (!string.IsNullOrEmpty(x.upn))
            {
                this.upn = x.upn.ToString();
            }
        }

        public string popularity { get; set; }
        public string profile_path { get; set; }
        public string name { get; set; }
        public string known_for_department { get; set; }
        public string adult { get; set; }
        public string gender { get; set; }
        public string status { get; set; }
        public string upn { get; set; }

        /*public string PartitionKey { get; set; }
        public string RowKey { get; set; }
        public DateTimeOffset Timestamp { get; set; }
        public string ETag { get; set; }*/

        object IEnumerator.Current => throw new NotImplementedException();

        public object this[string propertyName]
        {
            set
            {
                PropertyInfo pi = this.GetType().GetProperty(propertyName);
                pi.SetValue(this, value, null);
            }
        }
        public IEnumerator GetEnumerator()
        {        
            Dictionary<string, dynamic> propDict = new Dictionary<string, dynamic>();
            Type myType = typeof(Person);
            PropertyInfo[] myProps = myType.GetProperties();
            foreach (PropertyInfo myprop in myProps)
            {
                if (!myprop.Name.Equals("Item")) { 
                    propDict.Add(myprop.Name, myprop.GetValue(this, null)); }
            }
            return propDict.GetEnumerator();
        }

        bool IEnumerator.MoveNext()
        {
            throw new NotImplementedException();
        }

        void IEnumerator.Reset()
        {
            throw new NotImplementedException();
        }
    }
}
